package components

import (
    "YesFix/utils/locationData"
    "strings"
)

templ Prebook(){
<section id="prebook" class="bg-white text-white py-16">
    <div class="max-w-screen-xl mx-auto px-4 flex flex-col lg:flex-row gap-10 items-start">

        <!-- Left: Offer + Image -->
        <div class="w-full lg:w-1/2">
            <!-- Tag -->
            <div class="inline-block bg-brutalist-yellow text-brutalist-black font-bold px-4 py-1 uppercase mb-6">
                Pre-book
            </div>

            <!-- Title -->
            <h2 class="text-4xl sm:text-5xl uppercase text-brutalist-yellow font-brutalist mb-4">
                Pre- <span class="text-brutalist-black">book now!</span>
            </h2>

            <!-- Offer Text -->
            <p class="uppercase text-base sm:text-lg text-brutalist-black font-bold tracking-wide mb-8 leading-relaxed">
                ðŸŽ‰ Early Bird Offers<br />
                âœ” First 20 Customers â€“ Get FREE Service<br />
                âœ” Next 50 Customers â€“ Get 50% OFF<br />
                âœ” All Services Come With a 30-Day Guarantee<br />
                ðŸ”¥ Offer Ends Soon â€“ Limited-Time Only
            </p>

            <!-- Responsive Image -->
            <div class="flex justify-center lg:justify-start mt-6">
                <img src="public/pre.png" alt="YesFix Solutions"
                    class="w-full max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl" />
            </div>
        </div>

        <!-- Right: Prebooking Form -->
        <div id="prebook-form" class="w-full lg:w-1/2 bg-white text-black p-6 sm:p-8 shadow-[6px_6px_0_0_black] border-2 border-black">
            @Form(FormValues{}, map[string]string{})
        </div>

    </div>
</section>

}



type FormValues struct {
     FirstName string
     LastName  string
     Email     string
     Phone     string
     City      string
     Locality  string
     Duplicate string
}

func (values FormValues)Validate() map[string]string  {
    errors := map[string]string{}

    if values.FirstName == "" {
        errors["firstname"] = "*First name is required"
    }
    if values.LastName == "" {
        errors["lastname"] = "*Last name is required"    
    }
    if values.Email == "" || !strings.Contains(values.Email, "@") || !strings.Contains(values.Email, "."){ 
        errors["email"] = "*Enter a valid email address"
    }
    if values.Phone == "" || len(values.Phone) < 10 {
        errors["phone"] = "*Enter a valid phone number"
    }
    if values.City == "" {
        errors["city"] = "*City is required"
    }
    // if values.Duplicate != ""{
    //     errors["duplicate"] = "Bookinggg with same {values.Duplicate} already exists"
    // }


    // Additional validation logic can be added here
    return errors
}

templ Form(values FormValues, errors map[string]string, ) {
        <form class="space-y-6"
            hx-post="/prebook" 
            hx-target="#prebook-form" 
            hx-swap="innerHTML">
            <!-- First Name -->
            <div>
                <label for="firstname" class="block uppercase font-semibold mb-1">First Name</label>
                <input type="text" id="firstname" name="firstname" placeholder="First Name"
                    value={values.FirstName}
                    class="w-full border-2 border-black p-3 outline-none" />
                if errors["firstname"] != "" {
                    <p class="text-red-500 text-sm mt-1">{errors["firstname"]}</p>
                }
            </div>

            <!-- Last Name -->
            <div>
                <label for="lastname" class="block uppercase font-semibold mb-1">Last Name</label>
                <input type="text" id="lastname" name="lastname" placeholder="Last Name"
                    value={values.LastName}
                    class="w-full border-2 border-black p-3 outline-none" />
                if errors["lastname"] != "" {
                    <p class="text-red-500 text-sm mt-1">{errors["lastname"]}</p>
                }
            </div>

            <!-- Email -->
            <div>
                <label for="email" class="block uppercase font-semibold mb-1">Email</label>
                <input type="email" id="email" name="email" placeholder="Your Email"
                    value={values.Email}
                    class="w-full border-2 border-black p-3 outline-none" />
                if errors["email"] != ""{
                    <p class="text-red-500 text-sm mt-1">{errors["email"]}</p>
                }
            </div>

            <!-- Phone -->
            <div>
                <label for="phone" class="block uppercase font-semibold mb-1">Mobile No.</label>
                <input type="text" id="phone" name="phone" placeholder="Your mobile number"
                    value={values.Phone}
                    class="w-full border-2 border-black p-3 outline-none" />
                if errors["phone"] != ""{
                    <p class="text-red-500 text-sm mt-1">{errors["phone"]}</p>
                }
            </div>

            <!-- City -->
            <div>
                <label for="city" class="block uppercase font-semibold mb-1">City</label>
                <select id="city" name="city" 
                    hx-get="/locality" 
                    hx-target="#locality-select" 
                    hx-include="[name='city']"
                    hx-swap="innerHTML" class="w-full border-2 border-black p-3 outline-none bg-white text-black">

                    <option value="">Select your city</option>
                    for city, _ := range locationData.Cities {
                        <option value={city}>{city}</option>
                    }



                </select>
                if errors["city"] != ""{
                    <p class="text-red-500 text-sm mt-1">{errors["city"]}</p>
                }

            </div>

            <!-- Locality -->
            <div>
                <label for="locality" class="block uppercase font-semibold mb-1">Locality</label>
                <select id="locality-select" name="locality"
                    class="w-full border-2 border-black p-3 outline-none bg-white text-black">
                    <option value="">Select your locality</option>
                    for _, loc := range locationData.Cities[values.City] {
                        <option value={loc}>{loc}</option>
                    }
                </select>
                if errors["locality"] != ""{
                    <p class="text-red-500 text-sm mt-1">{errors["locality"]}</p>
                }
            </div>

            <!-- Duplicate Booking -->
            if errors["duplicate"] != "" {
                <p class="text-red-500 text-m ">{errors["duplicate"]}</p>
            }
            
            <!-- Submit Button -->
            <button type="submit"
                class="mt-4 px-6 py-3 w-full border-2 border-brutalist-yellow bg-brutalist-yellow text-brutalist-black font-black text-lg uppercase tracking-wider shadow-brutalist-shadow transition transform hover:translate-x-1 hover:translate-y-1 hover:text-brutalist-yellow hover:bg-transparent">

                <span id="submit-text">Submit</span>

                <!-- Loader Spinner -->
                <span id="submit-loader" class="hidden">
                    <svg class="animate-spin h-5 w-5 text-brutalist-black" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor"
                            d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                    </svg>
                </span>
            </button>
        </form>
        <script src="public/js/navbar.js" defer></script>

}

templ LocalityOptions(localities []string) {
    
    for _, l := range localities {
        <option value="{{l}}">{l}</option>
    }
}