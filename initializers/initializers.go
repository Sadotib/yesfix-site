package initializers

import (
	"YesFix/dbConfig/queries"
	"context"
	"log"
	"log/slog"
	"os"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
)

func LoadEnv() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal(err)
	}
}

func ConnectToDB() (*queries.Queries, error) {
	slog.Info("Connecting to the database...")
	db_url := os.Getenv("DATABASE_URL_1")

	config, err := pgxpool.ParseConfig(db_url)
	if err != nil {
		slog.Error("Failed to parse config", "error", err)
		log.Fatal(err)
	}

	config.MaxConns = 10 // Max open connections in the pool
	config.MinConns = 5  // Optional: min idle connections
	// config.MaxConnLifetime = time.Hour       // Optional: lifetime of a connection
	// config.MaxConnIdleTime = 5 * time.Minute // Optional: idle timeout

	dbpool, err := pgxpool.NewWithConfig(context.Background(), config)
	if err != nil {
		slog.Error("Failed to parse config", "error", err)
		log.Fatal(err)
	}
	// defer dbpool.Close()

	query := queries.New(dbpool) //New() autogenerated by sqlc from queries.sql
	//if there is no need to do database opereations on single connection, you can use dbpool directly
	// dbpool is a connection pool, it manages multiple connections to the database

	e := dbpool.Ping(context.Background()) //test the connection to the database
	if e != nil {
		slog.Error("Failed to ping the database", "error", e)
		log.Fatal(e)
	} else {
		slog.Info("Connected to the database successfullyyyy")
	}

	return query, nil

}
